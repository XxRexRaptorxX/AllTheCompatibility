plugins {
    id 'java-library'
    id 'eclipse'
    id 'idea'
    id 'maven-publish'
    id 'net.neoforged.gradle.userdev' version '7.0.145'
}


base {
    archivesName = mod_id
}

java.toolchain.languageVersion = JavaLanguageVersion.of(21)

//minecraft.accessTransformers.file rootProject.file('src/main/resources/META-INF/accesstransformer.cfg')
//minecraft.accessTransformers.entry public net.minecraft.client.Minecraft textureManager # textureManager


runs {
    // applies to all the run configs below
    configureEach {
        // Recommended logging data for a userdev environment
        // The markers can be added/remove as needed separated by commas.
        // "SCAN": For mods scan.
        // "REGISTRIES": For firing of registry events.
        // "REGISTRYDUMP": For getting the contents of all registries.
        systemProperty 'forge.logging.markers', 'REGISTRIES'

        // Recommended logging level for the console
        // You can set various levels here.
        // Please read: https://stackoverflow.com/questions/2031163/when-to-use-the-different-log-levels
        systemProperty 'forge.logging.console.level', 'debug'

        modSource project.sourceSets.main
    }

    client {
        // Comma-separated list of namespaces to load gametests from. Empty = all namespaces.
        systemProperty 'forge.enabledGameTestNamespaces', project.mod_id

        // Change run folder location
        workingDirectory project.file('run')

        // Fix mixin dependencies
        systemProperty 'mixin.env.remapRefMap', 'true'
        systemProperty 'mixin.env.refMapRemappingFile', "${projectDir}/build/createSrgToMcp/output.srg"
    }

    server {
        systemProperty 'forge.enabledGameTestNamespaces', project.mod_id
        programArgument '--nogui'

        // Change run folder location
        workingDirectory project.file('run')

        // Fix mixin dependencies
        systemProperty 'mixin.env.remapRefMap', 'true'
        systemProperty 'mixin.env.refMapRemappingFile', "${projectDir}/build/createSrgToMcp/output.srg"
    }

    gameTestServer {
        systemProperty 'forge.enabledGameTestNamespaces', project.mod_id
        programArgument '--nogui'

        // Change run folder location
        workingDirectory project.file('run')

        // Fix mixin dependencies
        systemProperty 'mixin.env.remapRefMap', 'true'
        systemProperty 'mixin.env.refMapRemappingFile', "${projectDir}/build/createSrgToMcp/output.srg"
    }

    data {
        // example of overriding the workingDirectory set in configureEach above, uncomment if you want to use it
        // workingDirectory project.file('run-data')

        // Change run folder location
        workingDirectory project.file('run')

        // Fix mixin dependencies
        systemProperty 'mixin.env.remapRefMap', 'true'
        systemProperty 'mixin.env.refMapRemappingFile', "${projectDir}/build/createSrgToMcp/output.srg"

        // Specify the modid for data generation, where to output the resulting resource, and where to look for existing resources.
        programArguments.addAll '--mod', project.mod_id, '--all', '--output', file('src/generated/resources/').getAbsolutePath(), '--existing', file('src/main/resources/').getAbsolutePath()
    }
}


// Include resources generated by data generators.
sourceSets.main.resources { srcDir 'src/generated/resources' }


repositories {
    maven {
        // JEI + patchouli
        name = "Jared's maven"
        url = "https://maven.blamejared.com/"
    }

    maven {
        // JEI fallback
        name = "ModMaven"
        url = "https://modmaven.dev"
    }

    maven {
        // Curios
        url = "https://maven.theillusivec4.top/"
    }

    maven {
        // location of the cursemaven
        url 'https://www.cursemaven.com'
        content {
            includeGroup "curse.maven"
        }
    }

    maven { url = "https://maven.createmod.net" } // Create, Ponder, Flywheel
    maven { url = "https://mvn.devos.one/snapshots" } // Registrate
    maven { url = "https://raw.githubusercontent.com/Fuzss/modresources/main/maven/" } // ForgeConfigAPIPort

}

// Versionsauflösung für ASM-Bibliothek
configurations.all {
    resolutionStrategy.eachDependency { DependencyResolveDetails details ->
        if (details.requested.group == 'org.ow2.asm') {
            // Erzwinge die Version 9.7 für alle ASM-Bibliotheken
            details.useVersion '9.7'
        }
    }
}


dependencies {

    implementation "net.neoforged:neoforge:${forge_version}"

    //tools
    compileOnly "mezz.jei:jei-${mc_version}-common-api:${jei_version}"
    compileOnly "mezz.jei:jei-${mc_version}-neoforge-api:${jei_version}"
    runtimeOnly "mezz.jei:jei-${mc_version}-neoforge:${jei_version}"
    runtimeOnly "curse.maven:jade-324717:${jade_version}"
    runtimeOnly "vazkii.patchouli:Patchouli:1.21-${patchouli_version}-NEOFORGE"

    //[mandatory]
    //curse.maven:<description>-<project-id>:<file-id>
    runtimeOnly "curse.maven:alltheores-405593:${ato_version}"

    //[optional]
    //runtimeOnly "curse.maven:allthemodium-364466:${allthemodium_version}"
    runtimeOnly("com.simibubi.create:create-${mc_version}:${create_version}") { transitive = false }
    runtimeOnly("net.createmod.ponder:Ponder-NeoForge-${mc_version}:${ponder_version}")
    runtimeOnly("dev.engine-room.flywheel:flywheel-neoforge-api-${mc_version}:${flywheel_version}")
    runtimeOnly("dev.engine-room.flywheel:flywheel-neoforge-${mc_version}:${flywheel_version}")
    runtimeOnly("com.tterrag.registrate:Registrate:${registrate_version}")
    //runtimeOnly "vazkii.botania:Botania:${mc_version}-${botania_version}-FORGE"
    //runtimeOnly "top.theillusivec4.curios:curios-forge:${curios_version}"

    //runtimeOnly "curse.maven:flib-661261:${flib_version}"
    //runtimeOnly "curse.maven:voliminousenergy-416704:${voluminous_energy_version}"
    //runtimeOnly "curse.maven:assemblylinemachine-388282:${assembly_line_machines_version}"
    //runtimeOnly "curse.maven:indreb-358877:${industrial_reborn_version}"
    //runtimeOnly "curse.maven:plaingrinder-452000:${plain_grinder_version}"
    //runtimeOnly "curse.maven:cyclic-239286:${cyclic_version}"
    runtimeOnly "curse.maven:simplegrinder-238899:${simple_grinder_version}"
    runtimeOnly "curse.maven:energized-power-782147:${energized_power_version}"
    //runtimeOnly "curse.maven:botarium-704113:${botarium_version}"
    //runtimeOnly "curse.maven:resourceful-lib-570073:${resourceful_lib_version}"
    //runtimeOnly "curse.maven:resourceful-config-714059:${resourceful_config_version}"
    //runtimeOnly "curse.maven:ad-astra-635042:${ad_astra_version}"
    runtimeOnly "curse.maven:mekanism-268560:${mekanism_version}" //to avoid ATO recipe errors
    runtimeOnly "curse.maven:actually-additions-228404:${aa_version}" //to avoid ATO recipe errors
    //runtimeOnly "curse.maven:ender-io-64578:${ender_io_version}" //to avoid ATO recipe errors
    runtimeOnly "curse.maven:modern-industrialization-405388:${modern_industrialization_version}"
    runtimeOnly "curse.maven:cloth-confg-api-348521:${cloth_config_api_version}"
    runtimeOnly "curse.maven:applied-energistics-223794:${applied_energistics_version}"
    runtimeOnly "curse.maven:ae2-jei-integration-1074338:${ae2_jei_integration_version}"

    runtimeOnly "curse.maven:ori-tech-1030830:${ori_tech_version}"
    runtimeOnly "curse.maven:architectury-419699:${architectury_version}"
    runtimeOnly "curse.maven:athena-841890:${athena_version}"
    runtimeOnly "curse.maven:gecko-lib-388172:${gecko_lib_version}"
    runtimeOnly "curse.maven:owo-lib-532610:${owo_lib_version}"
    runtimeOnly "curse.maven:fabric-api-889079:${fabric_api_version}"

    //runtimeOnly "curse.maven:tesseract-api-1067672:${tesseract_api_version}"
    //runtimeOnly "curse.maven:extended-industrialization-1068418:${extended_industrialization_version}"
    runtimeOnly "curse.maven:xycraft-653786:${xycraft_version}"
    runtimeOnly "curse.maven:xycraft-machines-653791:${xycraft_machines_version}"
    runtimeOnly "curse.maven:xycraft-world-653789:${xycraft_world_version}"
    runtimeOnly "curse.maven:replication-638351:${replication_version}"
    runtimeOnly "curse.maven:titanium-287342:${titanium_version}"
}



tasks.withType(ProcessResources).configureEach {
    var replaceProperties = [
            mc_version   : mc_version, mc_version_range: mc_version_range,
            forge_version         : forge_version, forge_version_range: forge_version_range,
            loader_version_range: loader_version_range, mixin_version: mixin_version,
            mod_id              : mod_id, mod_name: mod_name, mod_license: mod_license, mod_version: mod_version,
            mod_authors         : mod_authors, pack_format_number: pack_format_number,
    ]
    inputs.properties replaceProperties

    filesMatching(['META-INF/neoforge.mods.toml', 'pack.mcmeta']) {
        expand replaceProperties + [project: project]
    }
}

group = "xxrexraptorxx.${mod_id}.main"
archivesBaseName = "${mod_id}"
version = "${mc_version}-${mod_version}"

jar {
    archiveClassifier = ''
    archiveBaseName = "${mod_name}".replace(" ", "")
    archiveVersion = "${mc_version}-(v.${mod_version})"
}



publishing {
    publications {
        mavenJava(MavenPublication) {
            artifact jar
        }
    }
    repositories {
        maven {
            url "file://${project.projectDir}/mcmodsrepo"
        }
    }
}


tasks.withType(JavaCompile).configureEach {
    options.encoding = 'UTF-8' // Use the UTF-8 charset for Java compilation
}