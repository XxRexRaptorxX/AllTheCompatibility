buildscript {
    repositories {
        // These repositories are only for Gradle plugins, put any other repositories in the repository block further below
        maven { url = 'https://maven.minecraftforge.net' }
        mavenCentral()
    }
    dependencies {
        classpath group: 'net.minecraftforge.gradle', name: 'ForgeGradle', version: '5.1.+', changing: true
    }
}
apply plugin: 'net.minecraftforge.gradle'
// Only edit below this line, the above code adds and enables the necessary things for Forge to be setup.
apply plugin: 'eclipse'
apply plugin: 'maven-publish'

version = "${mod_version}"
group = 'xxrexraptorxx.main.ATC' // http://maven.apache.org/guides/mini/guide-naming-conventions.html
archivesBaseName = 'allthecompatibility'

// Mojang ships Java 17 to end users in 1.18+, so your mod should target Java 17.
java.toolchain.languageVersion = JavaLanguageVersion.of(17)

println('Java: ' + System.getProperty('java.version') + ' JVM: ' + System.getProperty('java.vm.version') + '(' + System.getProperty('java.vendor') + ') Arch: ' + System.getProperty('os.arch'))
minecraft {

    mappings channel: 'official', version: "${mc_version}"

    // accessTransformer = file('src/main/resources/META-INF/accesstransformer.cfg') // Currently, this location cannot be changed from the default.

    // Default run configurations.
    // These can be tweaked, removed, or duplicated as needed.
    runs {
        client {
            //botania
            property 'mixin.env.remapRefMap', 'true'
            property 'mixin.env.refMapRemappingFile', "${projectDir}/build/createSrgToMcp/output.srg"

            workingDirectory project.file('run')

            // Recommended logging data for a userdev environment
            // The markers can be added/remove as needed separated by commas.
            // "SCAN": For mods scan.
            // "REGISTRIES": For firing of registry events.
            // "REGISTRYDUMP": For getting the contents of all registries.
            property 'forge.logging.markers', 'REGISTRIES'

            // Recommended logging level for the console
            // You can set various levels here.
            // Please read: https://stackoverflow.com/questions/2031163/when-to-use-the-different-log-levels
            property 'forge.logging.console.level', 'debug'

            mods {
                examplemod {
                    source sourceSets.main
                }
            }
        }

        server {
            workingDirectory project.file('run')

            // Recommended logging data for a userdev environment
            // The markers can be added/remove as needed separated by commas.
            // "SCAN": For mods scan.
            // "REGISTRIES": For firing of registry events.
            // "REGISTRYDUMP": For getting the contents of all registries.
            property 'forge.logging.markers', 'REGISTRIES'

            // Recommended logging level for the console
            // You can set various levels here.
            // Please read: https://stackoverflow.com/questions/2031163/when-to-use-the-different-log-levels
            property 'forge.logging.console.level', 'debug'

            mods {
                examplemod {
                    source sourceSets.main
                }
            }
        }

        data {
            workingDirectory project.file('run')

            // Recommended logging data for a userdev environment
            // The markers can be added/remove as needed separated by commas.
            // "SCAN": For mods scan.
            // "REGISTRIES": For firing of registry events.
            // "REGISTRYDUMP": For getting the contents of all registries.
            property 'forge.logging.markers', 'REGISTRIES'

            // Recommended logging level for the console
            // You can set various levels here.
            // Please read: https://stackoverflow.com/questions/2031163/when-to-use-the-different-log-levels
            property 'forge.logging.console.level', 'debug'

            // Specify the modid for data generation, where to output the resulting resource, and where to look for existing resources.
            args '--mod', 'allthecompatibility', '--all', '--output', file('src/generated/resources/'), '--existing', file('src/main/resources/')

            mods {
                examplemod {
                    source sourceSets.main
                }
            }
        }
    }
}

// Include resources generated by data generators.
sourceSets.main.resources { srcDir 'src/generated/resources' }

repositories {
    maven {
        // location of the maven that hosts JEI files since January 2023
        name = "Jared's maven"
        url = "https://maven.blamejared.com/"
    }
    maven {
        // location of a maven mirror for JEI files, as a fallback
        name = "ModMaven"
        url = "https://modmaven.dev"
    }
    maven {
        // location of the maven of flywheel
        name "tterrag maven"
        url "https://maven.tterrag.com/"
    }
    maven {
        // location of the cursemaven
        url 'https://www.cursemaven.com'
         content {
             includeGroup "curse.maven"
         }
    }
    maven {
        // location of the curios maven
        url = "https://maven.theillusivec4.top/"
    }
    maven {
        // location of the botania maven
        url 'https://maven.blamejared.com'
    }
    maven {
        // create
        name = 'tterrag maven'
        url = 'https://maven.tterrag.com/'
    }
}

dependencies {
    minecraft "net.minecraftforge:forge:${mc_version}-${forge_version}"

    //JEI
    compileOnly(fg.deobf("mezz.jei:jei-${mc_version}-common-api:${jei_version}"))
    compileOnly(fg.deobf("mezz.jei:jei-${mc_version}-forge-api:${jei_version}"))
    runtimeOnly(fg.deobf("mezz.jei:jei-${mc_version}-forge:${jei_version}"))

    //dependencies
    //[mandatory]
    //curse.maven:<description>-<project-id>:<file-id>
    runtimeOnly fg.deobf("curse.maven:alltheores-405593:${ato_version}")

    //[optional]
    runtimeOnly fg.deobf("com.simibubi.create:create-${mc_version}:${create_version}:slim") { transitive = false }
    runtimeOnly fg.deobf("com.jozufozu.flywheel:flywheel-forge-${mc_version}:${flywheel_version}")
    runtimeOnly fg.deobf("com.tterrag.registrate:Registrate:${registrate_version}")
    runtimeOnly fg.deobf("top.theillusivec4.curios:curios-forge:${mc_version}-${curios_version}")
    runtimeOnly fg.deobf("vazkii.patchouli:Patchouli:${mc_version}-${patchouli_version}")
    runtimeOnly fg.deobf("vazkii.botania:Botania:${mc_version}-${botania_version}-FORGE")

    runtimeOnly fg.deobf("curse.maven:assemblylinemachine-388282:${assembly_line_machines_version}")
    //runtimeOnly fg.deobf("curse.maven:voliminousenergy-416704:${voluminous_energy_version}") crusher error!
    runtimeOnly fg.deobf("curse.maven:indreb-358877:${industrial_reborn_version}")
    runtimeOnly fg.deobf("curse.maven:plaingrinder-452000:${plain_grinder_version}")
    runtimeOnly fg.deobf("curse.maven:cyclic-239286:${cyclic_version}")
    runtimeOnly fg.deobf("curse.maven:simplegrinder-238899:${simple_grinder_version}")
    runtimeOnly fg.deobf("curse.maven:energized-power-782147:${energized_power_version}")
    runtimeOnly fg.deobf("curse.maven:resourceful-lib-570073:${resourceful_lib_version}")
    runtimeOnly fg.deobf("curse.maven:resourceful-config-714059:${resourceful_config_version}")
    runtimeOnly fg.deobf("curse.maven:botarium-704113:${botarium_version}")
    runtimeOnly fg.deobf("curse.maven:ad-astra-635042:${ad_astra_version}")
    runtimeOnly fg.deobf("curse.maven:ftb-library-forge-404465:${ftb_lib_version}")
    runtimeOnly fg.deobf("curse.maven:architectury-api-419699:${architectury_version}")
    runtimeOnly fg.deobf("curse.maven:ftb-industrial-contraption-539097:${industrial_contraption_version}")

     }

// Example for how to get properties into the manifest for reading at runtime.
jar {
    manifest {
        attributes([
                "Specification-Title"     : "allthecompatibility",
                "Specification-Vendor"    : "XxRexRaptorxX",
                "Specification-Version"   : project.version,
                "Implementation-Title"    : project.name,
                "Implementation-Version"  : project.jar.archiveVersion,
                "Implementation-Vendor"   : "XxRexRaptorxX",
                "Implementation-Timestamp": new Date().format("yyyy-MM-dd'T'HH:mm:ssZ")
        ])
    }
}

// Example configuration to allow publishing using the maven-publish plugin
// This is the preferred method to reobfuscate your jar file
jar.finalizedBy('reobfJar')
// However if you are in a multi-project build, dev time needs unobfed jar files, so you can delay the obfuscation until publishing by doing
// publish.dependsOn('reobfJar')

publishing {
    publications {
        mavenJava(MavenPublication) {
            artifact jar
        }
    }
    repositories {
        maven {
            url "file://${project.projectDir}/mcmodsrepo"
        }
    }
}


//Dummy task to fix post sync error caused by NeoGradle
tasks.register("idePostSync") {
}